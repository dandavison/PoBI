#+title: A genome-wide perspective on the history of the British Isles
#+author: Dan, Garrett, Peter et al.

* Environment
** Org
#+babel:   :dir /davison@oak.well.ox.ac.uk:~/bench :results output silent
#+options: ^:{} hideblocks

#+begin_src emacs-lisp :cache no
  (setq org-babel-default-header-args:R '((:session . "*R-PoBI*")))
#+end_src

#+results:
| (:session . *R-PoBI*) |
** Region codes
   #+results: region-codes
   | Orkney              | ORK |
   | Argyll and Bute     | ANB |
   | Banff and Buchan    | BNB |
   | Cumbria             | CUM |
   | Derbyshire          | DER |
   | Cheshire            | CHE |
   | Yorkshire           | YOR |
   | Northern Ireland    | NIR |
   | North East          | NEA |
   | Lancashire          | LAN |
   | Herefordshire       | HER |
   | North Pembrokeshire | NPE |
   | South Pembrokeshire | SPE |
   | North Wales         | NWA |
   | Lincolnshire        | LIN |
   | Nottinghamshire     | NOT |
   | Leicestershire      | LEI |
   | Northamptonshire    | NHA |
   | Oxfordshire         | OXF |
   | Worcestershire      | WOR |
   | Forest of Dean      | FOD |
   | Gloucestershire     | GLO |
   | Dorset              | DOR |
   | Devon               | DEV |
   | Cornwall            | COR |
   | Norfolk             | NFK |
   | Suffolk             | SUF |
   | Hampshire           | HAM |
   | Kent                | KEN |
   | Sussex              | SUS |
   | Norway              | NOR |
   | Sweden              | SWE |
   | Denmark             | DEN |
   | Germany             | GER |
   | Poland              | POL |
   | Belgium             | BEL |
   | France              | FRA |
   | Ireland             | IRE |
   | Italy               | ITA |
   | Spain               | SPA |

*** Check
   #+begin_src R :var codes=region-codes[,1] :rownames yes :results value replace :eval no
     c(nreg=length(codes), nunique=length(unique(codes)))
   #+end_src

    #+results:
    | nreg    | 0 |
    | nunique | 0 |

** R environment
*** Variables
#+begin_src R :var region.codes=region-codes
  source("lib/ded.R")
  source("lib/redefinitions.R")
  source("lib/libpobi.R")
  source("lib/libwtccc2.R")
  source("lib/libchromopainter.R")
  cpdir="POBIdan/ChromoPainterOUTPUT"

  PATH <- "/home/davison/src/shellfish/bin"
  system("mkdir -p stitched img rdata rlegend rmap flipind flipinput frdata freq lines indivs snpexclude indivexclude")

  chroms <- sprintf("%02d", 1:22)
  Ne <- 11418
  chunk <- 5e6
  snpdensity <- .0002 * .75
  cluster.level <- 3
  noverlap <- 200
#+end_src
*** Data file functions
#+begin_src R
  datafile <- function(chr, dataset=c("h","w"))
      switch(match.arg(dataset),
             h = sprintf("data/HM3/%s.hap", chr),
             w = sprintf("data/POBI+MS/%s-allx.gen", chr))
  legendfile <- function(chr, dataset=c("h","w"))
      switch(match.arg(dataset),
             h = sprintf("data/HM3/%s.legend", chr),
             w = stop("No need for this"))
  mapfile <- function(chr, dataset=c("h","w"))
      switch(match.arg(dataset),
             h = sprintf("data/HM3/%s.map", chr),
             w = stop("No need for this"))
  individfile <- function(dataset=c("h","w"))
      switch(match.arg(dataset),
             w = sprintf("data/POBI+MS/01-allx.ids"),
             h = stop("No need for this"))
  indivsamplefile <- function(dataset=c("h","w"))
      switch(match.arg(dataset),
             w = sprintf("indivs/indivs.sample"),
             h = stop("No need for this"))
  rdatafile <- function(chr, dataset)
      sprintf("rdata/%s-%s.%s", dataset, chr,
              if(dataset == "w") "gen" else "hap")
  rlegendfile <- function(chr, dataset)
      sprintf("rlegend/%s-%s.legend", dataset, chr)
  rmapfile <- function(chr, dataset)
      sprintf("rmap/%s-%s.map", dataset, chr)
  rstrandfile <- function(chr, dataset)
      sprintf("rstrand/%s", chr)
  frdatafile <- function(chr, dataset)
      sprintf("frdata/%s-%s.%s", dataset, chr,
              if(dataset == "w") "gen" else "hap")
  linesfile <- function(chr, dataset)
      sprintf("lines/%s-%s.lines", dataset, chr)
  freqfile <- function(chr, dataset)
      sprintf("freq/%s-%s.freq", dataset, chr)
  flipindfile <- function(chr, dataset)
      sprintf("flipind/%s-%s.flip", dataset, chr)
  flipinputfile <- function(chr, dataset)
      sprintf("flipinput/%s-%s.flip", dataset, chr)
  hapfile <- function(chr, dataset=c("h","w"))
      switch(match.arg(dataset),
             w = stop("Not implemented"),
             h = sprintf("data/HM3/%s.hap", chr))
  stitchedfile <- function(chr, pop)
      file.path("stitched", sprintf("%s-%s.hen", chr, pop))
  posfile <- function(chr, dataset=c("h","w"))
      switch(match.arg(dataset),
             w = sprintf("pos/%s", chr),
             h = stop("No need for this"))
  snpexcludefile <- function(chr, dataset=c("h","w"))
      switch(match.arg(dataset),
             w = sprintf("snpexclude/%s", chr),
             h = stop("No need for this"))
  indivexcludefile <- function(pop, dataset=c("h","w"))
      switch(match.arg(dataset),
             w = sprintf("indivexclude/%s", pop),
             h = stop("No need for this"))
  g.hapfile <- function(pop, chrom)
      file.path("garrett", "haplotypes", sprintf("%s.%s.haps", pop, chrom))
  g.idfile <- function(pop)
      file.path("garrett", "indivs", paste(pop, ".ids", sep=""))
  g.recombfile <- function(chrom)
      file.path("garrett", "recomb", paste(chrom, ".rec", sep=""))
  g.legfile <- function(chrom)
      file.path("garrett", "snps", paste(chrom, ".leg", sep=""))
  g.recipientfile <- function()
      file.path("garrett", "pops", "recipients")
  g.donorfile <- function()
      file.path("garrett", "pops", "donors")
  g.donorlistfile <- function(recipient)
      file.path("garrett", "donorlists", paste(recipient, ".donorlist", sep=""))
  g.codesfile <- function()
      file.path("garrett", "pops", "codes")
#+end_src

*** Individuals data
#+begin_src R
  indivs.d <- pobi.ms.read.samplefile()
  ids <- scan(individfile("w"), what="", quiet=TRUE)
  stopifnot(ids %in% rownames(indivs.d))
  indivs.d <- indivs.d[ids,]
  indivs.d$isPoBI <- seq(nrow(indivs.d)) %in% grep("^POBI", indivs.d$ID_2)
  stopifnot(!is.na(indivs.d$reg), indivs.d$reg != "NA")
  indivs.d$reg <- factor(indivs.d$reg)
  indivs.d$reg2 <- factor(ifelse(indivs.d$isPoBI, "UK", as.character(indivs.d$reg)))
  countries <- unique(as.character(indivs.d$reg2))
  popcodes <- structure(region.codes[[2]], names=region.codes[[1]])
  nwtccc2 <- nrow(indivs.d)
  stopifnot(nwtccc2 == 8267)
#+end_src

#+srcname: countries
#+begin_src R :results value replace
table(indivs.d$reg2)
#+end_src

#+results: countries
| Belgium |  544 |
| Denmark |  332 |
| France  |  479 |
| Germany | 1100 |
| Ireland |   61 |
| Italy   |  745 |
| Norway  |  953 |
| Poland  |   58 |
| Spain   |  205 |
| Sweden  | 1212 |
| UK      | 2578 |

* Sample sizes
  :PROPERTIES:
  :results: value replace
  :END:


  #+source: sample-sizes
  #+begin_src R
  table(indivs.d$reg2)
  #+end_src

  #+results: sample-sizes
  | Belgium |  544 |
  | Denmark |  332 |
  | France  |  479 |
  | Germany | 1100 |
  | Ireland |   61 |
  | Italy   |  745 |
  | Norway  |  953 |
  | Poland  |   58 |
  | Spain   |  205 |
  | Sweden  | 1212 |
  | UK      | 2578 |

  #+begin_src R :var x=sample-sizes[,1]
    sum(x)
  #+end_src

  #+results:
  : 8267


  #+source: sample-sizes-1
  #+begin_src R
  table(indivs.d$reg)
  #+end_src

  #+results: sample-sizes-1
  | Argyll and Bute     |   49 |
  | Banff and Buchan    |   64 |
  | Cheshire            |   52 |
  | Cornwall            |  104 |
  | Cumbria             |  259 |
  | Derbyshire          |   11 |
  | Devon               |   90 |
  | Dorset              |   45 |
  | Forest of Dean      |   48 |
  | Gloucestershire     |   47 |
  | Hampshire           |   50 |
  | Herefordshire       |   31 |
  | Kent                |   74 |
  | Lancashire          |   45 |
  | Leicestershire      |   88 |
  | Lincolnshire        |  151 |
  | Norfolk             |  119 |
  | North East          |  227 |
  | North Pembrokeshire |   56 |
  | North Wales         |   87 |
  | Northamptonshire    |   47 |
  | Northern Ireland    |   62 |
  | Nottinghamshire     |   80 |
  | Orkney              |  101 |
  | Oxfordshire         |  122 |
  | South Pembrokeshire |   14 |
  | Suffolk             |  105 |
  | Sussex              |   81 |
  | Worcestershire      |   42 |
  | Yorkshire           |  227 |
  | Belgium             |  544 |
  | Denmark             |  332 |
  | France              |  479 |
  | Germany             | 1100 |
  | Ireland             |   61 |
  | Italy               |  745 |
  | Norway              |  953 |
  | Poland              |   58 |
  | Spain               |  205 |
  | Sweden              | 1212 |

** Old (wrong) sample sizes
   #+tblname: old-sample-sizes-1
   | Argyll and Bute     |   45 |
   | Banff and Buchan    |   67 |
   | Belgium             |  544 |
   | Cheshire            |   49 |
   | Cornwall            |   73 |
   | Cumbria             |  261 |
   | Denmark             |  332 |
   | Derbyshire          |   10 |
   | Devon               |   78 |
   | Dorset              |   39 |
   | Forest of Dean      |   57 |
   | France              |  479 |
   | Germany             | 1100 |
   | Gloucestershire     |   46 |
   | Hampshire           |   47 |
   | Herefordshire       |   29 |
   | Ireland             |   61 |
   | Italy               |  745 |
   | Kent                |   60 |
   | Lancashire          |   39 |
   | Leicestershire      |   85 |
   | Lincolnshire        |  152 |
   | Norfolk             |  109 |
   | North East          |  219 |
   | North Pembrokeshire |   54 |
   | North Wales         |   77 |
   | Northamptonshire    |   57 |
   | Northern Ireland    |   44 |
   | Norway              |  953 |
   | Nottinghamshire     |   79 |
   | Orkney              |  136 |
   | Oxfordshire         |  127 |
   | Poland              |   58 |
   | South Pembrokeshire |   15 |
   | Spain               |  205 |
   | Suffolk             |   96 |
   | Sussex              |   86 |
   | Sweden              | 1212 |
   | Unknown             |  105 |
   | Worcestershire      |   35 |
   | Yorkshire           |  202 |

   #+begin_src R :var new=sample-sizes-1 :var old=old-sample-sizes-1 :rownames yes :results value replace
     new$old <- old[rownames(new),1]
     new
   #+end_src

#+results:
|                     |  new |  old |
|---------------------+------+------|
| Argyll and Bute     |   49 |   45 |
| Banff and Buchan    |   64 |   67 |
| Cheshire            |   52 |   49 |
| Cornwall            |  104 |   73 |
| Cumbria             |  259 |  261 |
| Derbyshire          |   11 |   10 |
| Devon               |   90 |   78 |
| Dorset              |   45 |   39 |
| Forest of Dean      |   48 |   57 |
| Gloucestershire     |   47 |   46 |
| Hampshire           |   50 |   47 |
| Herefordshire       |   31 |   29 |
| Kent                |   74 |   60 |
| Lancashire          |   45 |   39 |
| Leicestershire      |   88 |   85 |
| Lincolnshire        |  151 |  152 |
| Norfolk             |  119 |  109 |
| North East          |  227 |  219 |
| North Pembrokeshire |   56 |   54 |
| North Wales         |   87 |   77 |
| Northamptonshire    |   47 |   57 |
| Northern Ireland    |   62 |   44 |
| Nottinghamshire     |   80 |   79 |
| Orkney              |  101 |  136 |
| Oxfordshire         |  122 |  127 |
| South Pembrokeshire |   14 |   15 |
| Suffolk             |  105 |   96 |
| Sussex              |   81 |   86 |
| Worcestershire      |   42 |   35 |
| Yorkshire           |  227 |  202 |
| Belgium             |  544 |  544 |
| Denmark             |  332 |  332 |
| France              |  479 |  479 |
| Germany             | 1100 | 1100 |
| Ireland             |   61 |   61 |
| Italy               |  745 |  745 |
| Norway              |  953 |  953 |
| Poland              |   58 |   58 |
| Spain               |  205 |  205 |
| Sweden              | 1212 | 1212 |

* DONE MS exclusions
#+begin_src R
  MSindivs <- read.table(ifile, header=TRUE, row.names=2)[-1]
  colnames(MSindivs) <- "country"
#+end_src
** Variables
#+source: MS-ifile
#+begin_src emacs-lisp :results silent
"data/MS/MS_illumina.sample.geoinfoIII"
#+end_src


** Select countries
#+tblname: include-countries
| Country |    n |
|---------+------|
| Belgium |  566 |
| Denmark |  363 |
| France  |  536 |
| Germany | 1166 |
| Ireland |   73 |
| Italy   |  776 |
| Norway  | 1030 |
| Poland  |   59 |
| Spain   |  211 |
| Sweden  | 1401 |

#+begin_src R :var include.countries=include-countries :rownames yes :colnames yes
  include.countries <- rownames(include.countries)
  MSindivs$include <- MSindivs$country %in% include.countries
  system("mkdir -p data/MS/exclusions")
  cat(rownames(MSindivs)[!MSindivs$include], file="data/MS/exclusions/country-exclusions", sep="\n")
  table(MSindivs$country, MSindivs$include)
#+end_src

#+results:
|            | FALSE | TRUE |
|------------+-------+------|
| Australia  |   705 |    0 |
| Belgium    |     0 |  566 |
| Denmark    |     0 |  363 |
| FIN        |   652 |    0 |
| France     |     0 |  536 |
| Germany    |     0 | 1166 |
| Ireland    |     0 |   73 |
| Italy      |     0 |  776 |
| NewZealand |   156 |    0 |
| Norway     |     0 | 1030 |
| Poland     |     0 |   59 |
| Spain      |     0 |  211 |
| Sweden     |     0 | 1401 |
| UK         |  2048 |    0 |
| USA        |  1634 |    0 |

** Exclusions

#+begin_src sh
cat data/MS/exclusions/* | sort | uniq > data/MS/exclusions.all
#+end_src

#+begin_src sh :session none
wc -l data/MS/exclusions/*
echo $(cat data/MS/exclusions/* | sort | uniq | wc -l) unique
wc -l data/MS/exclusions.all
#+end_src

#+results:
|  910 | data/MS/exclusions/MSInternalExclusions.dan.txt |
| 5195 | data/MS/exclusions/country-exclusions           |
| 6105 | total                                           |
| 5565 | unique                                          |
| 5565 | data/MS/exclusions.all                          |
** Sample numbers

- PoBI+MS id files have 7924 individs
- Raw files and exclusion files suggest there should be 8233 in PoBI+MS.
- Data files have 8267

  #+begin_src R :results output
  system(paste("~/bin/numindivs-gen", datafile("22", "w")))
  #+end_src


|       | PoBI |    MS | PoBI+MS |
|-------+------+-------+---------|
| all   | 2912 | 11376 |         |
| ex    |  368 |  5687 |         |
| final | 2544 |  5689 |    8233 |
#+TBLFM: @4$4=@4$2+@4$3
#+TBLFM: @4$3=@2$3-@3$3
#+TBLFM: @4$2=@2$2-@3$2

#+begin_src sh
wc -l data/POBI+MS/*-allx.ids
#+end_src

#+results:
|   7924 | data/POBI+MS/01-allx.ids |
|   7924 | data/POBI+MS/02-allx.ids |
|   7924 | data/POBI+MS/03-allx.ids |
|   7924 | data/POBI+MS/04-allx.ids |
|   7924 | data/POBI+MS/05-allx.ids |
|   7924 | data/POBI+MS/06-allx.ids |
|   7924 | data/POBI+MS/07-allx.ids |
|   7924 | data/POBI+MS/08-allx.ids |
|   7924 | data/POBI+MS/09-allx.ids |
|   7924 | data/POBI+MS/10-allx.ids |
|   7924 | data/POBI+MS/11-allx.ids |
|   7924 | data/POBI+MS/12-allx.ids |
|   7924 | data/POBI+MS/13-allx.ids |
|   7924 | data/POBI+MS/14-allx.ids |
|   7924 | data/POBI+MS/15-allx.ids |
|   7924 | data/POBI+MS/16-allx.ids |
|   7924 | data/POBI+MS/17-allx.ids |
|   7924 | data/POBI+MS/18-allx.ids |
|   7924 | data/POBI+MS/19-allx.ids |
|   7924 | data/POBI+MS/20-allx.ids |
|   7924 | data/POBI+MS/21-allx.ids |
|   7924 | data/POBI+MS/22-allx.ids |
| 174328 | total                    |

* DONE Create combined POBI+MS data set
** wtccc2-analyse invocation
#+begin_src sh
  cd data/POBI+MS
  for chrom in `seq -w 14 22 | tac` ; do
      python ~/src/wtccc2/wtccc2-analyse/wtccc2-analyse.py \
          --make-gen --platform illumina \
          --cohorts 'MS POBI' --exclude ../MS/exclusions.all \
          --chrom $chrom --outfile $chrom
  done
#+end_src

** Check output for chr22
   :PROPERTIES:
   :dir: /davison@oak.well.ox.ac.uk:/home/davison/bench/data/POBI+MS-test/
   :END:
*** DONE Numbers in raw files

#+begin_example
~/bench/data/POBI+MS-test> bash z.sh
Wed Aug 25 20:00:04 2010
Analysis                      PCA
Cohorts                       ['MS', 'POBI']
Chromosomes                   [22]
SNP file                      None
Output file/prefix            22
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Intersecting chromosome files

gunzip -vc /data/oak/project/wtccc2/MS/illumina/calls/MS_22_illumina.gen.gz > 22-MS-22.tmp
/data/oak/project/wtccc2/MS/illumina/calls/MS_22_illumina.gen.gz:	 93.8%
gunzip -vc /data/oak/project/wtccc2/POBI/illumina/calls/POBI_22_illumina.gen.gz > 22-POBI-22.tmp
/data/oak/project/wtccc2/POBI/illumina/calls/POBI_22_illumina.gen.gz:	 94.4%
insect -v --unique -d ' ' -f 2 -o 22-insect_out 22-MS-22.tmp 22-POBI-22.tmp
cut -d ' ' -f 2 < 22-MS-22.tmp > /tmp/insect-1601-188280147932
cut -d ' ' -f 2 < 22-POBI-22.tmp > /tmp/insect-1601-415504816454
sort /tmp/insect-1601-188280147932 | uniq > /tmp/insect-1601-281609185427
sort /tmp/insect-1601-415504816454 | uniq > /tmp/insect-1601-993330115599
comm -12 /tmp/insect-1601-281609185427 /tmp/insect-1601-993330115599 > /tmp/insect-1601-686997337336
match /tmp/insect-1601-686997337336 < /tmp/insect-1601-188280147932 > /tmp/insect-1601-100889485177
match /tmp/insect-1601-686997337336 < /tmp/insect-1601-415504816454 > /tmp/insect-1601-16338026931
paste /tmp/insect-1601-100889485177 /tmp/insect-1601-100889485177 | sort -n -k 1 | cut -f 2 > /tmp/insect-1601-828485611156
paste /tmp/insect-1601-100889485177 /tmp/insect-1601-16338026931 | sort -n -k 1 | cut -f 2 > /tmp/insect-1601-661844370606
lines -f /tmp/insect-1601-828485611156 < 22-MS-22.tmp > 22-insect_out/22-MS-22.tmp.insect
lines -f /tmp/insect-1601-661844370606 < 22-POBI-22.tmp > 22-insect_out/22-POBI-22.tmp.insect
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Concatenating chromosomes

cat 22-insect_out/22-MS-* > 22-MS.gen
cat 22-insect_out/22-POBI-* > 22-POBI.gen
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Restricting to selected SNPs

shellfish --make-gen --file 22-MS  --out 22-MSr --messy
2010-08-25_20.00.24
shellfish version 0.0.8
20:00:24	Found .gen format data 22-MS.gen
20:00:24	File1: found .gen format data with 11376 individuals and 9607 SNPs
#+end_example

#+function: numindivs(coh)
#+begin_src sh
wc -l < ~/data/wtccc2/$coh/illumina/calls/${coh}_illumina.sample
#+end_src


#+call: numindivs(coh="MS")
#+results: numindivs(coh="MS")
: 11378

#+begin_example
mv 22-MS.sample 22-MSr.sample
shellfish --make-gen --file 22-POBI  --out 22-POBIr --messy
2010-08-25_20.00.24
shellfish version 0.0.8
20:00:24	Found .gen format data 22-POBI.gen
20:00:24	File1: found .gen format data with 2912 individuals and 9607 SNPs
#+end_example

#+call: numindivs(coh="POBI")
#+results: numindivs(coh="POBI")
: 2914

*** Excluding individuals
**** MS
***** DONE Unrecognised individs

#+begin_example
Excluding individuals

cat /data/oak/project/wtccc2/MS/illumina/exclusions/*.exclude.txt ../MS/exclusions.all | sort | uniq > 22-MS.xids
sed 1,2d /data/oak/project/wtccc2/MS/illumina/calls/MS_illumina.sample | cut -d ' ' -f 1 | match 22-MS.xids > 22-MS.wNA.xidx
MS: 1 excluded individuals not recognised
#+end_example

#+begin_src R :session :results output
  on.exit(closeAllConnections())
  MS.ids.x <- scan("22-MS.xids", what="", quiet=TRUE)
  MS.samplef <- "/data/oak/project/wtccc2/MS/illumina/calls/MS_illumina.sample"
  MS.ids.full <- scan(pipe(sprintf("sed 1,2d %s | cut -d ' ' -f 1", MS.samplef)), what="", quiet=TRUE)

  ok <- MS.ids.x %in% MS.ids.full
  cat("Number of individs: ", length(MS.ids.full), "\n")
  cat("Number of individs to be excluded: ", length(MS.ids.x), "\n")
  cat("Of these number recognised: ", sum(ok), "\n")
  cat(sprintf("Not recognised (line %d):\n", which(!ok)))
  print(MS.ids.x[!ok])
#+end_src

#+results:
:
:  Number of individs:  11376
: Number of individs to be excluded:  5688
: Of these number recognised:  5687
: Not recognised (line 5654):
: [1] "97505_H0392029_C04"


So line 5654 of MS.ids.x looks screwed up; the reason is that there's
no new line at the end of
/data/oak/project/wtccc2/MS/illumina/exclusions/MS_illumina_UnaffectedTwins.exclude.txt

***** DONE Numbers
#+begin_example
echo num lines: `grep -vF NA 22-MS.wNA.xidx | sort -n | wc -l`
num lines: 5687
grep -vF NA 22-MS.wNA.xidx | sort -n > 22-MS.xidx
columns -s -v -f 22-MS.xidx < 22-MSr.gen > 22-MSx.gen
sed 1,2d /data/oak/project/wtccc2/MS/illumina/calls/MS_illumina.sample | cut -d ' ' -f 1 | slice -v --line-file 22-MS.xidx > 22-MSx.ids
mv 22-MSr.sample 22-MSx.sample
#+end_example

So 5687 should have been removed from MS, leaving us with 11376-5687 = 5689

Which is correct. The problem is the 5288 in 22-MSx.ids

#+begin_src sh
echo -n "To_exclude "
wc -l 22-MS.xids

echo -n "Indices_to_be_excluded "
wc -l 22-MS.wNA.xidx

echo -n "Indices_to_be_excluded_wo_NA "
wc -l 22-MS.xids

echo -n "Included_IDs "
wc -l 22-MSx.ids

echo -n "Num_indivs_in_gen_file "
~/bin/numindivs-gen 22-MSx.gen
#+end_src

#+results:
| To_exclude                   | 5688 | 22-MS.xids     |
| Indices_to_be_excluded       | 5688 | 22-MS.wNA.xidx |
| Indices_to_be_excluded_wo_NA | 5688 | 22-MS.xids     |
| Included_IDs                 | 5689 | 22-MSx.ids     |
| Num_indivs_in_gen_file       | 5689 |                |

#+begin_src R
5688*3
#+end_src

#+results:
: 17064

**** PoBI
***** Unrecognised individs
#+begin_example
    cat /data/oak/project/wtccc2/POBI/illumina/exclusions/*.exclude.txt ../MS/exclusions.all | sort | uniq > 22-POBI.xids
    sed 1,2d /data/oak/project/wtccc2/POBI/illumina/calls/POBI_illumina.sample | cut -d ' ' -f 1 | match 22-POBI.xids > 22-POBI.xidx
    POBI: 5565 excluded individuals not recognised
#+end_example

This 5565 is the number of indivs in MS/exclusions.all, so that makes sense.

#+begin_src R :session :results output
  on.exit(closeAllConnections())
  POBI.ids.x <- scan("22-POBI.xids", what="", quiet=TRUE)
  POBI.samplef <- "/data/oak/project/wtccc2/POBI/illumina/calls/POBI_illumina.sample"
  POBI.ids.full <- scan(pipe(sprintf("sed 1,2d %s | cut -d ' ' -f 1", POBI.samplef)), what="", quiet=TRUE)

  ok <- POBI.ids.x %in% POBI.ids.full
  cat("Number of individs: ", length(POBI.ids.full), "\n")
  cat("Number of individs to be excluded: ", length(POBI.ids.x), "\n")
  cat("Of these number recognised: ", sum(ok), "\n")
#+end_src

#+results:
:
:  Number of individs:  2912
: Number of individs to be excluded:  5899
: Of these number recognised:  334

***** DONE Numbers
#+begin_example
grep -vF NA 22-POBI.wNA.xidx | sort -n > 22-POBI-tmp && mv 22-POBI-tmp 22-POBI.xidx
columns -s -v -f 22-POBI.xidx < 22-POBIr.gen > 22-POBIx.gen
sed 1,2d /data/oak/project/wtccc2/POBI/illumina/calls/POBI_illumina.sample | cut -d ' ' -f 1 | slice -v --line-file 22-POBI.xidx > 22-POBIx.ids
mv 22-POBIr.sample 22-POBIx.sample
#+end_example

So 334 should have been removed from POBI, leaving us with src_R{2912-334} = 2578.

#+begin_src sh
~/bin/numindivs-gen 22-POBIx.gen
wc -l 22-POBIx.ids
#+end_src

#+results:
| 2578 |              |
| 2578 | 22-POBIx.ids |

*** Combine across cohorts
#+begin_example
Combining data across cohorts

cut -d ' ' -f 1-5 < 22-MSx.gen > 22-MSx.map
cut -d ' ' -f 6- < 22-MSx.gen > 22-MSx.gen_only
cut -d ' ' -f 1-5 < 22-POBIx.gen > 22-POBIx.map
cut -d ' ' -f 6- < 22-POBIx.gen > 22-POBIx.gen_only
paste -d ' ' 22-MSx.gen 22-POBIx.gen_only > 22-allx.gen
cat 22-MSx.ids 22-POBIx.ids > 22-allx.ids
#+end_example

Total should be src_R{5689+2578}=8267

#+begin_src sh
~/bin/numindivs-gen 22-allx.gen
wc -l *.ids
#+end_src

#+results:
|  8267 |              |
|  5288 | 22-MSx.ids   |
|  2636 | 22-POBIx.ids |
|  7924 | 22-allx.ids  |
| 15848 | total        |
* PCA
#+begin_src sh
  cd data/POBI+MS
  python ~/src/wtccc2/wtccc2-analyse/wtccc2-analyse.py \
      --pca --platform illumina \
      --cohorts 'MS POBI' --exclude ../MS/exclusions.all \
      --outfile MS-POBI-pca-
#+end_src
      
* Paper
** Abstract
The post-glacial history of human occupation of the British Isles has
received a lot of attention from archeologists and historians during
the last 250 years, and from geneticists during the last three
decades. Here we address some of the key questions in this literature
using genome-wide genetic variation data. Mixture modeling and
principal component analyses recover genome-wide geographic clines
that are consistent with continental patterns and thus consistent with
a null model of isolation by distance.

** Introduction
** Results
*** Genotype-based
**** Allele frequency differentiation
***** Candidate SNPs
**** Proxy-population admixture analyses
#+lob: lib/psi.org:admixmcmc()

From comment in R function:

      ## xA[1:L,1:3] are counts of A allele at L SNPs in the two parental and the admixed populations
      ## xa[1:L,1:3] are the same, for allele a
      ## parameters of model are
      ##   ancestral and parental allele frequencies p0, p1, p2
      ##   drift parameters F1, F2, Gi := (1-Fi)/Fi
      ##   parental pop allele frequencies pi ~ Beta( p0Gi, (1-p0)Gi )
      ##   admixture proportion q
      ##   obtain sample from posterior distribution of (p0, F1, F2, p1, p2, q)

#+begin_src R

#+end_src
**** Unsupervised clustering/ordination
***** PCA: congruence of genetic and geographic maps
[[file:pobi-pca-scatter-zoom.png]]

#+srcname: concatenate-data
#+begin_src R

#+end_src



***** Structure
***** SFA
**** IBD sharing HMM
     How many between-region relatives?
*** Haplotype-based
**** STARTED Phasing
***** DONE Prepare data set for phasing
****** Environment
******* Create links to HapMap data files
#+begin_src sh
  cd data/HM3
  for i in `seq 1 22` ; do
      ln -fs \
          ../hapmap3_r2_plus_1000g_jun2010_b36_ceu/hapmap3.r2.b36.allMinusPilot1CEU.chr$i.snpfilt.haps \
          `printf "%02d" $i`.hap

      ln -fs \
          ../hapmap3_r2_plus_1000g_jun2010_b36_ceu/hapmap3.r2.b36.allMinusPilot1CEU.chr$i.snpfilt.legend \
          `printf "%02d" $i`.legend
      ln -fs \
          ../hapmap3_r2_plus_1000g_jun2010_b36_ceu/genetic_map_chr${i}_combined_b36.txt \
          `printf "%02d" $i`.map
  done
#+end_src
******* R data frames
#+source: set-up-data-frames
#+begin_src R
  dd <- list()
  dd$h <- lapply(legendfile(chroms, "h"), read.table, header=TRUE, as.is=TRUE, col.names=c("rs","pos","a0","a1"))
  dd$w <- lapply(chroms, function(chr)
                 read.table(pipe(sprintf("cut -d' ' -f2-5 < %s", datafile(chr,"w"))),
                            header=FALSE, as.is=TRUE, col.names=c("rs","pos","a0","a1")))
  names(dd$h) <- names(dd$w)  <- chroms

  df <- data.frame(row.names=chroms)
  df$Lh <- sapply(dd$h, nrow)
  df$Lw <- sapply(dd$w, nrow)
  df$hinw <- mapply(function(h, w) sum(h$rs %in% w$rs), dd$h, dd$w, SIMPLIFY=FALSE)
  df$winh <- mapply(function(h, w) sum(w$rs %in% h$rs), dd$h, dd$w, SIMPLIFY=FALSE)
#+end_src

****** DONE Restrict to intersection
We're going to flip WTCCC2 to match HapMap3
******* Create merged SNP lists
#+source: create-isect
#+begin_src R
  isect <- mapply(merge, dd$w, dd$h, MoreArgs=list(by="rs"), SIMPLIFY=FALSE)
  isect <- lapply(isect, function(i) i[order(i$pos.x),])
#+end_src
******* Create restricted data files
#+source: create-restricted-files
#+begin_src R
  for(c in chroms) {
      for(d in c("w","h")) {
          ## map <- match(isect[[c]]$rs, dd[[d]][[c]]$rs)
          ## cat(map, sep="\n", file=linesfile(c, d))
          ## stopifnot(!is.na(map))
          ## cmd <- paste(file.path(PATH, "lines"),
          ##              "-f", linesfile(c, d),
          ##              "<", datafile(c, d),
          ##              ">", rdatafile(c, d))
          ## print(cmd)
          ## system(cmd)
          ## if(d == "h") {
          ##     ## legend and mapfiles have headers
          ##     lfile <- tempfile()
          ##     cat(map+1, sep="\n", file=lfile)

          ##     cmd <- paste(file.path(PATH, "lines"),
          ##                  "-f", lfile,
          ##                  "<", legendfile(c, "h"),
          ##                  ">", rlegendfile(c, "h"))
          ##     print(cmd)
          ##     system(cmd)

          ##     cmd <- paste(file.path(PATH, "lines"),
          ##                  "-f", lfile,
          ##                  "<", mapfile(c, "h"),
          ##                  ">", rmapfile(c, "h"))
          ##     print(cmd)
          ##     system(cmd)
          ## }
          cat(rep("+", length(map)), sep="\n", file=rstrandfile(c, "w"))
      }
  }
#+end_src

******* Make pos file
#+begin_src R
  make.pos.files <- function() {
      dir.create("pos")
      for(c in chroms) {
          pos <- scan(pipe(paste("cut -d' ' -f3 <", frdatafile(c, "w"))), what=integer())
          cat(pos, file=file.path("pos", c), sep="\n")
      }
  }
  make.pos.files()
#+end_src

****** DONE Check restricted data dimensions

#+begin_src sh :colnames yes
  printf "chr\thapmap-L\twtccc2-L\thapmap-n\twtccc2-n\n"
  for i in `seq -w 1 22` ; do
      h=rdata/h-$i.hap
      w=rdata/w-$i.gen
      printf "%02d\t%d\t%d\t%d\t%d\n" \
          $i \
          `wc -l < $h` \
          `wc -l < $w` \
          `head -n1 $h | wc | awk '{print $2}'` \
          `~/bin/numindivs-gen $w`
  done
#+end_src

#+results:
| chr | hapmap-L | wtccc2-L | hapmap-n | wtccc2-n |
|   1 |    38977 |    38977 |      410 |     8267 |
|   2 |    41420 |    41420 |      410 |     8267 |
|   3 |    34441 |    34441 |      410 |     8267 |
|   4 |    30084 |    30084 |      410 |     8267 |
|   5 |    31185 |    31185 |      410 |     8267 |
|   6 |    33177 |    33177 |      410 |     8267 |
|   7 |    27372 |    27372 |      410 |     8267 |
|   0 |    28491 |    28491 |      410 |     8267 |
|   0 |    24386 |    24386 |      410 |     8267 |
|  10 |    26922 |    26922 |      410 |     8267 |
|  11 |    24865 |    24865 |      410 |     8267 |
|  12 |    24696 |    24696 |      410 |     8267 |
|  13 |    18973 |    18973 |      410 |     8267 |
|  14 |    16758 |    16758 |      410 |     8267 |
|  15 |    15284 |    15284 |      410 |     8267 |
|  16 |    15627 |    15627 |      410 |     8267 |
|  17 |    13338 |    13338 |      410 |     8267 |
|  18 |    15224 |    15224 |      410 |     8267 |
|  19 |     8656 |     8656 |      410 |     8267 |
|  20 |    13139 |    13139 |      410 |     8267 |
|  21 |     7475 |     7475 |      410 |     8267 |
|  22 |     7635 |     7635 |      410 |     8267 |

****** Flip the WTCCC2 genotypes to match HapMap3 strand
******* Construct flip indicator files
#+source: create-flip-indicator-files
#+begin_src R
  flipind <- function(df, file) {
      alleles <- df[,c("a0.x", "a1.x","a0.y","a1.y")]
      ind <- rep(3, nrow(alleles))
      ok <- apply(alleles, 1, function(a) all(a %in% c("A","C","G","T")))
      write.table(alleles[ok,], file=file, quote=FALSE, row.names=FALSE, col.names=FALSE)
      ind[ok] <- scan(pipe(sprintf("%s/flipind < %s", PATH, file)), what=integer())
      ind
  }

  for(c in chroms)
      for(d in "w") {
          cat(flipind(isect[[c]], flipinputfile(c, d)), file=flipindfile(c, d), sep="\n")
      }
#+end_src
******* Flip WTCCC2 PoBI+MS
#+source: create-flipped-files
#+begin_src R
  for(c in rev(chroms)) {
    cmd <- sprintf("%s/%s -i %s -n %02d < %s > %s",
                   PATH, "flipgen",
                   flipindfile(c, "w"),
                   nwtccc2,
                   rdatafile(c, "w"),
                   frdatafile(c, "w"))
    print(cmd)
    system(cmd)

    cmd <- sprintf("ln -fs $PWD/%s %s", rdatafile(c, "h"), frdatafile(c, "h"))
    print(cmd)
    system(cmd)
  }
#+end_src

******* Create strand indicators
#+source: create-strand-indicators
#+begin_src R
  for(c in chroms) {
      w <- pipe(paste("cut -d' ' -f4-5 <", frdatafile(c, "w")))
      h <- pipe(paste("cut -d' ' -f3-4 <", rlegendfile(c, "h")))
      w <- matrix(scan(w, what=""), nrow=2)
      h <- matrix(scan(h, what=""), nrow=2)
      strand <- ifelse(is.same.strand(w, h), "+", "-")
      w.pos <- scan(pipe(paste("cut -d' ' -f3 <", frdatafile(c, "w"))), what=integer())
      h.pos <- scan(pipe(paste("cut -d' ' -f2 <", rlegendfile(c, "h"))), what=integer())
      if(any(bad <- w.pos != h.pos))
          warning("Physical position differs for ", sum(bad), " SNPs on chromosome ", c)
      cat(paste(w.pos, strand), sep="\n", file=file.path("rstrand", c))
  }
#+end_src

****** DONE Check flipped data dimensions
******* DONE Flip indicators
#+begin_src sh
  wc -l flipind/*
#+end_src

#+results:
|  38977 | flipind/w-01.flip |
|  41420 | flipind/w-02.flip |
|  34441 | flipind/w-03.flip |
|  30084 | flipind/w-04.flip |
|  31185 | flipind/w-05.flip |
|  33177 | flipind/w-06.flip |
|  27372 | flipind/w-07.flip |
|  28491 | flipind/w-08.flip |
|  24386 | flipind/w-09.flip |
|  26922 | flipind/w-10.flip |
|  24865 | flipind/w-11.flip |
|  24696 | flipind/w-12.flip |
|  18973 | flipind/w-13.flip |
|  16758 | flipind/w-14.flip |
|  15284 | flipind/w-15.flip |
|  15627 | flipind/w-16.flip |
|  13338 | flipind/w-17.flip |
|  15224 | flipind/w-18.flip |
|   8656 | flipind/w-19.flip |
|  13139 | flipind/w-20.flip |
|   7475 | flipind/w-21.flip |
|   7635 | flipind/w-22.flip |
| 498125 | total             |

******* DONE Flipped data
#+begin_src sh :colnames yes
  printf "chr\thapmap-L\twtccc2-L\thapmap-n\twtccc2-n\n"
  for i in `seq -w 1 22` ; do
      h=frdata/h-$i.hap
      w=frdata/w-$i.gen
      printf "%02d\t%d\t%d\t%d\t%d\n" \
          $i \
          `wc -l < $h` \
          `wc -l < $w` \
          `head -n1 $h | wc | awk '{print $2}'` \
          `~/bin/numindivs-gen $w`
  done
#+end_src

#+results:
| chr | hapmap-L | wtccc2-L | hapmap-n | wtccc2-n |
|   1 |    38977 |    38977 |      410 |     8267 |
|   2 |    41420 |    41420 |      410 |     8267 |
|   3 |    34441 |    34441 |      410 |     8267 |
|   4 |    30084 |    30084 |      410 |     8267 |
|   5 |    31185 |    31185 |      410 |     8267 |
|   6 |    33177 |    33177 |      410 |     8267 |
|   7 |    27372 |    27372 |      410 |     8267 |
|   0 |    28491 |    28491 |      410 |     8267 |
|   0 |    24386 |    24386 |      410 |     8267 |
|  10 |    26922 |    26922 |      410 |     8267 |
|  11 |    24865 |    24865 |      410 |     8267 |
|  12 |    24696 |    24696 |      410 |     8267 |
|  13 |    18973 |    18973 |      410 |     8267 |
|  14 |    16758 |    16758 |      410 |     8267 |
|  15 |    15284 |    15284 |      410 |     8267 |
|  16 |    15627 |    15627 |      410 |     8267 |
|  17 |    13338 |    13338 |      410 |     8267 |
|  18 |    15224 |    15224 |      410 |     8267 |
|  19 |     8656 |     8656 |      410 |     8267 |
|  20 |    13139 |    13139 |      410 |     8267 |
|  21 |     7475 |     7475 |      410 |     8267 |
|  22 |     7635 |     7635 |      410 |     8267 |

Was:

| chr | hapmap-L | wtccc2-L | hapmap-n | wtccc2-n |
|   1 |    38977 |    38977 |      410 |     8267 |
|   2 |    41420 |    30687 |      410 |     8267 |
|   3 |    34441 |    34441 |      410 |     8267 |
|   4 |    30084 |    30084 |      410 |     8267 |
|   5 |    31185 |    31185 |      410 |     8267 |
|   6 |    33177 |    33177 |      410 |     8267 |
|   7 |    27372 |    27372 |      410 |     8267 |
|   0 |    28491 |    28491 |      410 |     8267 |
|   0 |    24386 |    24386 |      410 |     8267 |
|  10 |    26922 |    26922 |      410 |     8267 |
|  11 |    24865 |    24865 |      410 |     8267 |
|  12 |    24696 |    24696 |      410 |     8267 |
|  13 |    18973 |    18973 |      410 |     8267 |
|  14 |    16758 |    16758 |      410 |     8267 |
|  15 |    15284 |    15284 |      410 |     8267 |
|  16 |    15627 |    15433 |      410 |     8267 |
|  17 |    13338 |    13338 |      410 |     8267 |
|  18 |    15224 |    15224 |      410 |     8267 |
|  19 |     8656 |     8656 |      410 |     8267 |
|  20 |    13139 |     5776 |      410 |     8267 |
|  21 |     7475 |     7475 |      410 |     8267 |
|  22 |     7635 |     7635 |      410 |     8267 |

****** DONE Check allele frequencies
#+begin_src R
  freq <- lapply(chroms, list)
  for(c in rev(chroms)) {
      nh <- 1910 ## 410
      ## Read in hapmap haplotypes in intersection
      freq[[c]]$h <- 1 - colMeans(matrix(scan(frdatafile(c, "h"), what=integer()), nrow=nh))
      cat(freq[[c]]$h, sep="\n", file=freqfile(c,"h"))

      ## Create w freq file
      cmd <- sprintf("%s/sstat -p -n %d < %s > %s",
                     PATH, nwtccc2, frdatafile(c,"w"), freqfile(c,"w"))
      print(cmd)
      system(cmd)
      freq[[c]]$w <- 1 - scan(freqfile(c,"w"))
      cat(freq[[c]]$w, sep="\n", file=freqfile(c,"w"))
  
      png(file=sprintf("img/freqs/%s-freqs.png", c))
      plot(freq[[c]]$h, freq[[c]]$w, xlab="HapMap3",ylab="PoBI+MS")
      dev.off()
  }
#+end_src

#+results:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 |

Functions to compute frequency of allele 0
#+begin_src R
  wfrequency <- function(c, i) {
      w <- scan(pipe(sprintf("sed -n -e %dp -e %dq < %s",
                             i, i, rdatafile(c, "w"))),
                quiet=TRUE, what="")
      wg <- matrix(as.numeric(w[6:length(w)]), nrow=3)
      mean(t(2:0) %*% wg) / 2
  }

  hfrequency <- function(c, i)
      1 - mean(scan(pipe(sprintf("sed -n -e %dp -e %dq < %s",
                                 i, i, rdatafile(c, "h"))),
                    quiet=TRUE, what=integer()))
#+end_src
****** Check
#+tblname: rsids
| SNP       |
|-----------|
| rs5747968 |
| rs2236639 |
| rs9605028 |

#+source: check-SNPs(rsids=rsids)
#+begin_src R :results insert value :colnames yes
  check.snp <- function(rs, c) {
      idx <- which(isect[[c]]$rs == rs)
      pipe.w <- function(c)
          pipe(sprintf("sed -n -e %dp -e %dq < %s | cut -d' ' -f4-5",
                         idx, idx, rdatafile(c, "w")))
        pipe.h <- function(c)
            pipe(sprintf("sed -n -e %dp -e %dq < %s | cut -d' ' -f3-4",
                         idx, idx, rlegendfile(c, "h")))

        data.frame(rs = rs,
                   chr = c,
                   alleles.w = paste(scan(pipe.w(c), what=""), collapse="/"),
                   alleles.h = paste(scan(pipe.h(c), what=""), collapse="/"),
                   freq.w = round(wfrequency(c, idx), 2),
                   freq.h = round(hfrequency(c, idx), 2))
    }

    do.call("rbind", lapply(rsids[,1], check.snp, "22"))
#+end_src

| rs        | chr | alleles.w | alleles.h | freq.w | freq.h |
|-----------+-----+-----------+-----------+--------+--------|
| rs5747968 |  22 | A/C       | G/T       |   0.67 |   0.22 |
| rs2236639 |  22 | A/G       | A/G       |   0.08 |   0.15 |
| rs9605028 |  22 | A/G       | A/G       |   0.95 |   0.95 |

| rs        | chr | alleles.w | alleles.h | freq.w | freq.h |
|-----------+-----+-----------+-----------+--------+--------|
| rs5747968 |  22 | A/C       | T/G       |   0.67 |   0.69 |
| rs2236639 |  22 | A/G       | G/A       |   0.08 |   0.95 |
| rs9605028 |  22 | A/G       | A/G       |   0.95 |   0.95 |
| rs        | chr | alleles.w | alleles.h | freq.w | freq.h |
|-----------+-----+-----------+-----------+--------+--------|
| rs5747968 |  22 | A/C       | T/G       |   0.67 |   0.69 |
| rs2236639 |  22 | A/G       | G/A       |   0.08 |   0.95 |
| rs9605028 |  22 | A/G       | A/G       |   0.95 |   0.95 |

#+results: check-SNPs (hapmap3+1kG)
| rs        | chr | alleles.w | alleles.h | freq.w | freq.h |
|-----------+-----+-----------+-----------+--------+--------|
| rs5747968 |  22 | A/C       | G/T       |   0.33 |   0.22 |
| rs2236639 |  22 | A/G       | A/G       |   0.92 |   0.15 |
| rs9605028 |  22 | A/G       | A/G       |   0.05 |   0.95 |



# hapmap3
| rs        | chr | alleles.w | alleles.h | freq.w | freq.h |
|-----------+-----+-----------+-----------+--------+--------|
| rs5747968 |  22 | A/C       | T/G       |   0.33 |   0.69 |
| rs2236639 |  22 | A/G       | G/A       |   0.92 |   0.95 |
| rs9605028 |  22 | A/G       | A/G       |   0.05 |   0.95 |


- HapMap website says rs2236639 has A allele CEU frequency .084.
- a0,a1 means a0 <-> 0, a1 <-> 1
- So HapMap frequencies are 1 - mean(hap)
- WTCCC2 frequencies are c(2,1,0) %*% genop



| rs#       | chrom |      pos | strand | build    | ref_allele | ref-allele_freq | ref-allele_count | other_allele | other-freq | other-allele_count |
| rs2236639 | chr22 | 15452483 | +      | ncbi_b36 | A          |           0.084 |               19 | G            |      0.916 |                207 |

****** SNP QC
#+begin_src sh
  qctool -g w-#.gen \
      -write-snp-excl-list \
      -info .975 1 \
      -hwe 20 \
      -maf 0 .001 \
      -snp-missing-rate .02
#+end_src

****** Babel script
#+begin_src R :noweb yes
  <<set-variables()>>
  <<set-up-data-frames()>>
  <<create-isect()>>
  <<create-restricted-files()>>
  <<create-flip-indicator-files()>>
  <<create-flipped-files()>>
#+end_src

#+results:
: 0
***** Sample files and per-population exclude files
#+begin_src R
  wtccc2.write.samplefile(indivs.d, file=indivsamplefile("w"))
  for(pop in levels(indivs.d$reg2)) {
      ids.notpop <- rownames(subset(indivs.d, reg2 != pop))
      cat(ids.notpop, sep="\n", file=indivexcludefile(pop, "w"))
  }
  cat("", file=indivexcludefile("All", "w"))
#+end_src
***** Write per-population per-chunk scripts
#+begin_src R :results output :results replace
  for(pop in levels(indivs.d$reg2)) {
      cat("\n", pop, "\n")
      odir <- file.path("impute2", pop)
      dir.create(file.path(odir, "log"), recursive=TRUE)
      for(c in chroms) {
          cat(c, " ")
          cmdsdir <- file.path(odir, "cmds", c)
          stdoutdir <- file.path(odir, "stdout", c)
          stderrdir <- file.path(odir, "stderr", c)
          outdir <- file.path(odir, "out", c)
          stopifnot(!file.exists(cmdsdir))
          dir.create(cmdsdir, recursive=TRUE)
          dir.create(stdoutdir, recursive=TRUE)
          dir.create(stderrdir, recursive=TRUE)
          dir.create(outdir, recursive=TRUE)
          pos <- scan(posfile(c, "w"), quiet=TRUE)
          intervals <- make.intervals(length(pos), width=chunk*snpdensity, overlap=noverlap)
          intervals[] <- pos[c(intervals)]
          d <- diff(intervals[,"start"])
          cat(nrow(intervals), "intervals, diff range", range(d), ", ", sum(d > chunk), "above nominal chunk size, ", sum(d > 1.5 * chunk) ,"above 1.5 times nominal\n")
          for(i in seq(nrow(intervals))) {
              cmd <-
                  paste("impute2",
                        "-phase",
                        "-m", mapfile(c, "h"),
                        "-h", hapfile(c, "h"),
                        "-l", legendfile(c, "h"),
                        "-g", frdatafile(c, "w"),
                        "-sample_g", indivsamplefile("w"),
                        "-exclude_samples_g", indivexcludefile(pop, "w"),
                        "-strand_g", rstrandfile(c),
                        "-k 80",
                        "-int", intervals[i,"start"], intervals[i,"end"],
                        "-buffer 1000",
                        "-exclude_snps_g", snpexcludefile(c, "w"),
                        "-Ne", Ne,
                        "-o", file.path(outdir, sprintf("%03d", i)))
              cat(qsub.script(cmd,
                              name=sprintf("%s-%s-%03d", pop, c, i),
                              outfile=file.path(stdoutdir, i),
                              errfile=file.path(stderrdir, i),
                              level=cluster.level),
                  file=file.path(cmdsdir, sprintf("%03d.sh", i)))
          }
      }
  }
#+end_src

#+results:
#+begin_example
 Belgium 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 Denmark 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 France 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 Germany 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 Ireland 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 Italy 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 Norway 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 Poland 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 Spain 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 Sweden 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal

 UK 
01  71 intervals, diff range 1947939 29320726 ,  1 above nominal chunk size,  1 above 1.5 times nominal
02  75 intervals, diff range 1667434 12608671 ,  3 above nominal chunk size,  1 above 1.5 times nominal
03  63 intervals, diff range 1277688 10849435 ,  2 above nominal chunk size,  1 above 1.5 times nominal
04  55 intervals, diff range 1633306 7077615 ,  2 above nominal chunk size,  0 above 1.5 times nominal
05  57 intervals, diff range 1712913 7868008 ,  2 above nominal chunk size,  1 above 1.5 times nominal
06  60 intervals, diff range 1553309 7992761 ,  1 above nominal chunk size,  1 above 1.5 times nominal
07  50 intervals, diff range 1552839 11479688 ,  2 above nominal chunk size,  1 above 1.5 times nominal
08  52 intervals, diff range 682891 9991574 ,  2 above nominal chunk size,  1 above 1.5 times nominal
09  44 intervals, diff range 1309703 33977466 ,  1 above nominal chunk size,  1 above 1.5 times nominal
10  49 intervals, diff range 1352819 7537081 ,  2 above nominal chunk size,  1 above 1.5 times nominal
11  45 intervals, diff range 1572923 10271148 ,  2 above nominal chunk size,  1 above 1.5 times nominal
12  45 intervals, diff range 1457807 5989786 ,  1 above nominal chunk size,  0 above 1.5 times nominal
13  35 intervals, diff range 1675859 4568098 ,  0 above nominal chunk size,  0 above 1.5 times nominal
14  31 intervals, diff range 1496602 4062291 ,  0 above nominal chunk size,  0 above 1.5 times nominal
15  28 intervals, diff range 1236343 5206165 ,  1 above nominal chunk size,  0 above 1.5 times nominal
16  29 intervals, diff range 980027 14946008 ,  2 above nominal chunk size,  2 above 1.5 times nominal
17  24 intervals, diff range 1618177 6194781 ,  2 above nominal chunk size,  0 above 1.5 times nominal
18  28 intervals, diff range 1957661 5755362 ,  1 above nominal chunk size,  0 above 1.5 times nominal
19  16 intervals, diff range 2410910 12411195 ,  2 above nominal chunk size,  1 above 1.5 times nominal
20  24 intervals, diff range 1427002 7411540 ,  2 above nominal chunk size,  0 above 1.5 times nominal
21  14 intervals, diff range 1250769 3131822 ,  0 above nominal chunk size,  0 above 1.5 times nominal
22  14 intervals, diff range 1343493 3710465 ,  0 above nominal chunk size,  0 above 1.5 times nominal
#+end_example

****** Shell version
       -strand_g frdata/w-$c.gen.strand \

       -fix_strand_g \

       #+begin_src sh
       	 mkdir -p impute2/cmds impute2/out

       	 for c in `seq -w 1 21` ; do
             echo \
               	 impute2 \
               	 -phase \
               	 -m rmap/h-$c.map \
               	 -h frdata/h-$c.hap \
               	 -l rlegend/h-$c.legend \
               	 -g frdata/w-$c.gen \
               	 -strand_g rstrand/$c \
               	 -int 20e6 24e6 \
               	 -Ne 11418 \
               	 -o impute2/out/$c \
               > impute2/cmds/$c.sh
       	 done
       #+end_src
***** Runs
      :PROPERTIES:
      :dir: /davison@login1-cluster1:bench/ 
      :results: value replace
      :END:
      

      level4:
      - UK 01 - 12
      - Germany 01 - 12
      - Sweden 01 - 12
      - Norway 01 - 12


      #+begin_src sh
      for i in `seq -w 1 22` ; do echo "$i" ; done
      #+end_src

      #+tblname: impute2 cluster jobs
      |  1 |     |
      |  2 |     |
      |  3 |     |
      |  4 |     |
      |  5 |     |
      |  6 |     |
      |  7 |     |
      |  8 |     |
      |  9 |     |
      | 10 |     |
      | 11 | 3/4 |
      | 12 | 3/4 |
      | 13 |   2 |
      | 14 |   2 |
      | 15 |   2 |
      | 16 |   2 |
      | 17 |   4 |
      | 18 |   3 |
      | 19 |   4 |
      | 20 |   2 |
      | 21 |   4 |
      | 22 |   3 |

      #+srcname: chrom-nchunks
      #+begin_src sh :var pop="Belgium"
        for c in `seq -w 1 22` ; do
            echo "$c    `ls impute2/$pop/cmds/$c | wc -l`"
        done
      #+end_src

      #+results: chrom-nchunks
      |  1 | 71 |
      |  2 | 75 |
      |  3 | 63 |
      |  4 | 55 |
      |  5 | 57 |
      |  6 | 60 |
      |  7 | 50 |
      |  8 | 52 |
      |  9 | 44 |
      | 10 | 49 |
      | 11 | 45 |
      | 12 | 45 |
      | 13 | 35 |
      | 14 | 31 |
      | 15 | 28 |
      | 16 | 29 |
      | 17 | 24 |
      | 18 | 28 |
      | 19 | 16 |
      | 20 | 24 |
      | 21 | 14 |
      | 22 | 14 |
 
    #+srcname: chrom-phasing-finished
    #+begin_src sh :var countries=countries[,0] :_____dir /davison@oak:bench/
      echo "chrom $countries"
      for c in `seq -w 1 22` ; do
           echo -n "$c "
           for pop in $countries ; do
               echo -n "`ls impute2/$pop/out/$c/*_haps | wc -l` "
           done
           echo
       done
    #+end_src

    #+results: chrom-phasing-finished
    | chrom | Belgium | Denmark | France | Germany | Ireland | Italy | Norway | Poland | Spain | Sweden | UK |
    |     1 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |     2 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |     3 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |     4 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |     5 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |     6 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |     7 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |     8 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |     9 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |    10 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |    11 |      14 |      15 |     35 |       0 |      45 |     5 |      0 |     45 |    45 |      0 |  0 |
    |    12 |      14 |      23 |     24 |       0 |      23 |     1 |      0 |     25 |    21 |      0 |  0 |
    |    13 |      35 |      35 |     35 |       1 |      35 |     4 |      4 |     35 |    35 |      0 |  0 |
    |    14 |       3 |      13 |      3 |       0 |      31 |     0 |      0 |     10 |    29 |      0 |  0 |
    |    15 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |    16 |       0 |       0 |      0 |       0 |       0 |     0 |      0 |      0 |     0 |      0 |  0 |
    |    17 |      24 |      24 |     24 |      24 |      24 |    24 |     24 |     24 |    24 |     24 | 24 |
    |    18 |      28 |      28 |     28 |      28 |      28 |    28 |     28 |     28 |    28 |     28 | 16 |
    |    19 |      16 |      16 |     16 |      16 |      16 |    16 |     16 |     16 |    16 |     16 | 16 |
    |    20 |      24 |      24 |     24 |      20 |      24 |    24 |     22 |     24 |    24 |      3 |  0 |
    |    21 |      14 |      14 |     14 |      14 |      14 |    14 |     14 |     14 |    14 |     14 | 14 |
    |    22 |      14 |      14 |     14 |      14 |      14 |    14 |     14 |     14 |    14 |     14 | 14 |

***** R environment
#+begin_src R :var chrom.nchunks=chrom-nchunks
  current.chroms <- as.character(c(17,19,21,22))
  chrom.nchunks <- structure(chrom.nchunks[[2]], names=sprintf("%02d",chrom.nchunks[[1]]))
  SCA <- c("DEN","SWE","NOR")
#+end_src

#+lob: lib/psi.org:qplots()

***** Test phasing
****** DONE Run twice on same input
#+begin_src sh
for i in 1 2 ; do
  impute2 -phase \
      -m data/HM3/22.map \
      -h data/HM3/22.hap \
      -l data/HM3/22.legend \
      -g frdata/w-22.gen \
      -sample_g indivs/indivs.sample \
      -exclude_samples_g indivexclude/Poland \
      -strand_g rstrand/22 \
      -k 80 \
      -int 29284399 33284399 \
      -buffer 1000 \
      -exclude_snps_g snpexclude/22 \
      -Ne 11418 \
      -o impute2-test/$i
done
      # -burnin 0 \
      # -iter 1 \
#+end_src
******* Check haplotypes
#+begin_src R :var hfile1="impute2-test/1_haps" :var hfile2="impute2-test/2_haps" :var chrom=22 :var reg="Poland" :var int0=29284399 :var int1=33284399 :results output replace
  date()
  ids.pop <- indivs.d$ID_1[indivs.d$reg2 == reg]
  h1 <- read.haplotypes(hfile1, ids=ids.pop)
  h2 <- read.haplotypes(hfile2, ids=ids.pop)
  leg <- read.chiamo.legend(rdatafile(chrom, "w"))
  stopifnot(identical(dimnames(h1), dimnames(h2)))

  ## Check hap SNPs are SNPs in interval
  in.int <- leg$pos > int0 & leg$pos < int1
  stopifnot(leg$ID_2[in.int] == rownames(h1))

  compare.haplotypes(h1, h2)
#+end_src

#+results:
#+begin_example

[1] "Sat Sep 25 13:45:18 2010"
 Read 1018 items
Read 118088 items
Warning message:
closing unused connection 3 (cut -d ' ' -f 2 < impute2-test/1_haps)
Read 1018 items
Read 118088 items
Warning messages:
1: closing unused connection 3 (cut -d ' ' -f 2 < impute2-test/2_haps)
2: closing unused connection 4 (cut -d ' ' -f 6- < impute2-test/1_haps)
Warning message:
closing unused connection 5 (cut -d ' ' -f 6- < impute2-test/2_haps)
 Comparing haplotypes
null device
          1
#+end_example

****** DONE Poland chr22
******* Check duplicate runs
#+begin_src R :var hfile1="impute2-test/out-1/006_haps" :var hfile2="impute2-test/out-2/006_haps" :var chrom=22 :var reg="Poland" :var int0=32779778 :var int1=36779340 :results output replace
  date()
  ids.pop <- indivs.d$ID_1[indivs.d$reg2 == reg]
  h1 <- read.haplotypes(hfile1, ids=ids.pop)
  h2 <- read.haplotypes(hfile2, ids=ids.pop)
  leg <- read.chiamo.legend(rdatafile(chrom, "w"))
  stopifnot(identical(dimnames(h1), dimnames(h2)))

  ## Check hap SNPs are SNPs in interval
  in.int <- leg$pos >= int0 & leg$pos <= int1
  stopifnot(rownames(h1) %in% leg$ID_2[in.int])

  compare.haplotypes(h1, h2, "Poland-chr22-006.png")
#+end_src

#+results:
#+begin_example

[1] "Sat Sep 25 13:45:18 2010"
 Read 1018 items
Read 118088 items
Warning message:
closing unused connection 3 (cut -d ' ' -f 2 < impute2-test/1_haps)
Read 1018 items
Read 118088 items
Warning messages:
1: closing unused connection 3 (cut -d ' ' -f 2 < impute2-test/2_haps)
2: closing unused connection 4 (cut -d ' ' -f 6- < impute2-test/1_haps)
Warning message:
closing unused connection 5 (cut -d ' ' -f 6- < impute2-test/2_haps)
 Comparing haplotypes
null device
          1
#+end_example
****** Validate phasing
******* Allele frequencies should be the same!
******* Distribution of identical stretch lengths
#+begin_src R
  identical.stretch.lengths <- function(hap1, hap2) {
      r <- rle(hap1 == hap2)
      r$lengths[r$values]
  }

#+end_src

******** Compare Orkney vs Norway and Spain vs Norway
#+begin_src R :var chrom=22 :var nmax=99999
  indivs.d <- pobi.ms.read.samplefile()
  ids <- scan(indivfile("w"), what="")
  pop1 <- "Norway"
  haps <- read.haplotypes(hapfile(chrom, "w"), ids)
  h1 <- extract.haplotypes(pop1, haps, indivs.d)

  n1 <- min(nmax,ncol(h1))
  n2 <- min(nmax,ncol(h2))

  id.lengths <- list()
  id.lengths[[pop1]] <- list()
  for(pop2 in c("Orkney","Spain")) {
      cat(pop1, "vs", pop2, "\n")
      h2 <- extract.haplotypes(pop2, haps, indivs.d)
      grid <- expand.grid(i=1:n1, j=1:n2)
      id.lengths[[pop1]][[pop2]] <-
          mapply(function(i,j) {
              if(j %% 10 == 0 && i == 1) cat(i, j, "\n")
              identical.stretch.lengths(h1[,i], h2[,j])
          }, grid$i, grid$j, SIMPLIFY=FALSE)
  }
#+end_src

#+results:
****** Check overlaps
#+begin_src R :results value replace
  p <- lapply(chroms, function(c) scan(posfile(c, "w"), quiet=TRUE))
  i <- lapply(p, function(pos) make.intervals(length(pos), width=chunk*snpdensity, overlap=noverlap))
  o <- lapply(i, function(ints) ints[-nrow(ints),"end"] - ints[-1,"start"])
  unique(unlist(o))
#+end_src

#+results:
: 199
****** Check chunk sizes
This demonstrated that occasionally, the UK output had a different
number of SNPs.

#+begin_src R
  list.chunk.sizes <- function(pop, chrom) {
      cat(pop, "\n")
      files <- list.files(path=file.path("impute2", pop, "out", chrom),
                          pattern="[0-9][0-9][0-9]_haps$",
                          full.names=TRUE)
      count.snps <- function(f)
          as.integer(system(paste("wc -l <", f), intern=TRUE))
      sapply(files, count.snps)
  }
  
  chrom <- "18"
  sapply(unique(as.character(indivs.d$reg2)), list.chunk.sizes, chrom)
#+end_src

***** Reduce to common SNP set
#+begin_src R
  lf <- function(pop)
      list.files(path=file.path("impute2", pop, "out", c),
                 pattern="[0-9][0-9][0-9]_haps$",
                 full.names=TRUE)
  
  insect.chunk <- function(files) {
      ## chunks <- sub(".+\\([0-9][0-9][0-9]\\)_haps$", "\\1", files)
      chunks <- sub("_haps", "", sapply(strsplit(files, "/"), "[", 5))
      chunk <- chunks[1]
      stopifnot(chunk == chunks)
      odir <- file.path("insect", c, chunk)
      dir.create(odir, recursive=TRUE)
      ## ofiles <- gsub("/", "_", files)
      ofiles <- file.path(odir,
                          sapply(lapply(strsplit(files, "/"), "[", c(2,4,5)), paste, collapse="_"))
      file.symlink(file.path("~/bench", files), ofiles)
      cmd <- paste("insect",
                   "-f 1",
                   "-d ' '",
                   "-o", odir,
                   paste(ofiles, collapse=" "))
      print(cmd)
      system(cmd)
  }
  
  for(c in current.chroms) {
      pop.files <- sapply(countries, lf)
      if(!is.matrix(pop.files)) {
          cat("Chrom", c, "different numbers of chunk files across countries:\n")
          print(sapply(pop.files, length))
          next
      }
      apply(pop.files, 1, insect.chunk)
  }
  
#+end_src

***** Stitch haplotypes
#+begin_src R
  for(pop in countries) {
      ids <- indivs.d$ID_1[indivs.d$reg2 == pop]
      for(chr in current.chroms) {
          hapfiles <- list.files(path=file.path("insect", chr),
                                 pattern=sprintf("%s_%s_[0-9][0-9][0-9]_haps.insect", pop, chr),
                                 recursive=TRUE, full.names=TRUE)
          stopifnot(length(hapfiles) == chrom.nchunks[chr,1])
          cat(sprintf("%20s %s\n", pop, chr))
          stitch.haplotypes(hapfiles, ids, stitchedfile(chr, pop), nolap=noverlap)
  
      }
  }
#+end_src
**** TODO What's going on with chromosome 1 ??
**** STARTED Copying Analysis
     :PROPERTIES:
     :visibility: content
     :END:
***** emails
****** From Garrett 1
From: Garrett Hellenthal <ghellenthal@gmail.com>
Subject: Re: UK-Europe haplotypes
Date: Thu, 30 Sep 2010 13:34:17 +0100
To: Dan Davison <davison@stats.ox.ac.uk>

Hi Dan -

Maybe you can take a preliminary look at the results for chrom 22, as
they're finished? All of these results are based on doing 10 E-M runs to
estimate N_e. (Typically we then average this across chromos and re-run with
fixed N_e to get final proportions and samples.)

For the donors, I've estimated proportions for which they copy from each
other (and themselves) using a "leave-one-out" approach, where, e.g., a SWE
ind copies with equal a-priori prob from any of the 49 inds from each of the
other donor pops plus the other 49 inds of their own pop. (We leave-one-out
so that every donor ind copies from the exact same number of inds from every
donor pop including itself.)

For the recipients, I've estimated proportions from which they copy from the
donors (using 50 inds/donor-pop), as well as generated 10 samples from the
PAC model for each haplotype. Note these are all "raw" proportions, based
directly on the PAC model output.

The files for the donors are at
"/data/oak/user/hellenth/POBIdan/ChromoPainterOUTPUT/LeaveOneOutNeResults/"
The files for the recipients are at
"/data/oak/user/hellenth/POBIdan/ChromoPainterOUTPUT/PaintingSamples/"

Most of the output is described in the brief write-up I gave you; I think
you'll be mostly interested in the ".chunkcounts.out" files and the
".samples.out" files for now. If you divide each row of ".chunkcounts.out"
by its sum, this gives you the estimated proportion of copying from each
donor. The ".samples.out" files give, for each recipient haplotype, 10
samples from the PAC model. Each row under a haplotype header is a sample
for that recipient hap (as ordered in the files you gave me). The first
column gives the sample number (1...10) and each subsequent column gives the
sampled donor haplotype at each snp. Donor haplotypes are labeled as ordered
in the phase-style input files. For all files, labels "1"-"100" are BEL,
"101"-"200" are DEN, "201"-"300" are FRA, etc...

Another thing you may need is in
"/data/oak/user/hellenth/POBIdan/ChromoPainterOUTPUT/" -- the ".recomrates"
files give the positions corresponding to the locations in the "samples.out"
files (this is different than the whole chromo 22 recom-rates file you gave
me, as I first remove monomorphic snps, which may differ per each pop
analyzed).

Let me know if you have permission troubles as well, etc.
Garrett

****** From Garrett 2
From: Garrett Hellenthal <ghellenthal@gmail.com>
Subject: Re: chimp copying figure
Date: Wed, 13 Oct 2010 11:53:24 +0100
To: Dan Davison <davison@stats.ox.ac.uk>

Hi Dan -

Just put the results for the donor pops in

/data/oak/user/hellenth/POBIdan/ChromoPainterOUTPUT/LeaveOneOutNeResults/

and for the recipients in

/data/oak/user/hellenth/POBIdan/ChromoPainterOUTPUT/PaintingNeResults/

Again only chrom 22 has "*samples.out" files, for the recipients only. The
rest all have "chunkcounts.out" files, which contain the expected number of
chunks copied by each ind from each donor pop (which includes "Self" for the
donor pop runs).

Runs that still haven't finished:
CUM - 18,20,22
NEA - 18,20
YOR - 18,20

***** Questions
****** Should I be using *.regionchunkcounts.out for copying proportions?
****** What's the num.regions column in *.regionchunkcounts.out?
****** No difference between pops in *prop.out files
****** Why self lower than others in *prop.out files?
***** STARTED Create Garrett input files
#+begin_src R :var codes.d=region-codes :results output replace
  ndonors <- 50
  stopifnot(countries[countries != "UK"] %in% names(popcodes))
  stopifnot(levels(indivs.d$reg) %in% names(popcodes))
  UKregions <- unique(as.character(indivs.d$reg[indivs.d$reg2 == "UK"]))
  
  write.garrett.recomb.file <- function(chrom, leg) {
      op <- options() ; on.exit(options(op))
      options(scipen=100, digits=15)
      hmap <- read.table(mapfile(chrom, "h"), header=TRUE, as.is=TRUE)
      r <- approx(hmap[c("position","COMBINED_rate.cM.Mb.")], xout=leg$pos)$y
      stopifnot(diff(leg$pos) > 0)
      write.table(cbind(start.pos=leg$pos, recom.rate.perbp=r*1e-8),
                  file=g.recombfile(chrom), quote=FALSE, row.names=FALSE, col.names=TRUE)
  }
  
  indiv2hap.idx <- function(idx) c(rbind(2*idx - 1, 2*idx))
  
  write.garrett.haplotype.and.id.files <- function(haps, ids, pos, chrom, pop, perm) {
      stopifnot(ncol(haps) == 2*length(ids))
      stopifnot(nrow(haps) == length(pos))
      hap.perm <- indiv2hap.idx(perm)
      haps <- haps[,hap.perm]
      ids <- ids[perm]
      ## num.inds
      ## num.snps
      ## P positions.vector
      ## SSSSSSSS (repeated num.snps times, though really you can have anything here)
      hapfile <- g.hapfile(pop, chrom)
      cat(length(ids), "\n", file=hapfile)
      cat(nrow(haps), "\n", file=hapfile, append=TRUE)
      cat("P", pos, sep=" ", file=hapfile, append=TRUE) ; cat("\n", file=hapfile, append=TRUE)
      cat(rep("S", nrow(haps)), "\n", sep="", file=hapfile, append=TRUE)
      cat(rbind(haps, rep("\n", ncol(haps))), sep="", file=hapfile, append=TRUE)
      if(!file.exists(g.idfile(pop)))
          cat(ids, sep="\n", file=g.idfile(pop))
      else
          cat("File exists -- should check same contents\n")
  }
  
  set.seed(14011978)
  perms <- sapply(levels(indivs.d$reg), function(reg) sample(1:sum(indivs.d$reg == reg)),
                  simplify=FALSE)
  names(perms) <- popcodes[names(perms)]
  stopifnot(identical(perms, read.object("perms.rda")))
  
  for(c in current.chroms) {
      leg0 <- read.chiamo.legend(stitchedfile(c, "Norway"))
      if(!file.exists(g.legfile(c)))
          write.table(leg0, file=g.legfile(c),
                      col.names=FALSE, row.names=FALSE, quote=FALSE)
      if(!file.exists(g.recombfile(c)))
          write.garrett.recomb.file(c, leg0)
      for(pop in countries) {
          ids <- indivs.d$ID_1[indivs.d$reg2 == pop]
          hen <- stitchedfile(c, pop)
          leg <- read.chiamo.legend(hen)
          ## stopifnot(identical(leg, leg0)) ## ??
          haps <- read.haplotypes(hen, ids)
  
          if(pop != "UK")
              write.garrett.haplotype.and.id.files(haps, ids, pos=leg$pos,
                                                   chrom=c, pop=popcodes[pop], perm=perms[[popcodes[pop]]])
          else {
              for(UKreg in UKregions) {
                  inUK <- indivs.d$reg2 == "UK"
                  inreg <- indivs.d[inUK,"reg"] == UKreg
                  haps.reg <- haps[,rep(inreg, each=2),drop=FALSE]
                  ids.reg <- ids[inreg]
                  hapfile <-
                      write.garrett.haplotype.and.id.files(haps.reg, ids.reg, pos=leg$pos,
                                                           chrom=c, pop=popcodes[UKreg], perm=perms[[popcodes[UKreg]]])
              }
          }
  
      }
   }
  
  write.table(cbind(popcodes, gsub(" ", "_", names(popcodes))),
                    file=g.codesfile(), quote=FALSE, row.names=FALSE, col.names=FALSE)
  recipients <- popcodes[c(UKregions, "Ireland")]
  donors <- popcodes[countries[! countries %in% c("UK","Ireland")]]
  cat(recipients, file=g.recipientfile(), sep="\n")
  
  cat(donors, file=g.donorfile(), sep="\n")
  
  write.donorlist <- function(recipient, donors, n, ndonors) {
      stopifnot(names(n) == c(donors, recipient))
      n[donors] <- ndonors
      write.table(n, file=g.donorlistfile(recipient),
                  quote=FALSE, row.names=TRUE, col.names=FALSE)
  }
  
  tab <- table(popcodes[as.character(indivs.d$reg)])
  for(recip in recipients)
      write.donorlist(recip, donors, tab[c(donors,recip)], ndonors)
#+end_src

#+results:
:
:  Read 7624 items
: Read 884384 items
: Warning messages:
: 1: closing unused connection 3 (cut -d ' ' -f 2 < impute2/Poland/out/22/all.hen)
: 2: closing unused connection 4 (cut -d ' ' -f 6- < impute2/Poland/out/22/all.hen)

****** email
#+begin_example
From: Garrett Hellenthal <ghellenthal@gmail.com>
Subject: Re: this week
Date: Fri, 18 Jun 2010 12:24:27 +0100
To: Dan Davison <davison@stats.ox.ac.uk>

Hi Dan -

I've attached example input files, for an analysis painting the Basque HGDP
haplotypes as a mosaic of the other HGDP European populations' "donor"
haplotypes (I think for chromo 22). There are 3 files. We probably want to
have one set of haplotype and recomrate files per chromosome.

The haplotype input format (e.g. "BasqueCondOnEurope.phase.inp") is
PHASE-input style, but with an additional line at the top noting how many of
the haplotypes in the file are to be used as donors. Also, these X "donor
haplotypes" should be the in the first X rows of haplotypes in the file.
These should be ordered such that the first X_1 donor haplotypes are from
donor population 1 (with every two haplotype lines from a single donor
individual), the next X_2 donor haplotypes from population 2, etc.... The
remaining haplotypes in the file should be from the recipient individuals
(in our case the POBI inds), again with every two consecutive haplotypes an
individual. Alleles should be 0 or 1.

In case you haven't worked with PHASE much before, the PHASE-ish file format
I use is as follows:

num.donorhaps
num.total.inds
num.snps
P positions.vector
SSSS....SSS <-- repeated "num.snps" times
donorhap_1
donorhap_2
donorhap_3
.
.
donorhap_{ndonorhaps}
recipienthap_1
.
.
recipienthap_{2*nind-ndonorhaps}

For example, if there are 60 donor haps and 20 POBI haps at 5 snps (with
basepair positions 100,...,500), the file should be:

60
40
5
P 100 200 300 400 500
SSSSS
00100
01000
(etc)

There are two other files I need as well: one (a) specifying recombination
rate, and one (b) specifying the donor populations.

For (a), e.g. "BasqueCondOnEurope.recomrates", there should be two columns,
one giving basepair positions and the other giving the recombination rate
(the probability of recombination per generation per basepair) between the
basepair in its row and the basepair in the next row. (This is equivalent to
the total genetic distance in Morgans between these two basepairs divided by
the total physical distance between the two.) There should also be a header
file (see attached).

For (b), e.g. "BasqueCondOnEurope.donorlist", there should be one row per
donor population and two columns: one giving the population name and the
other giving the number of haplotypes from that pop.

let me know if you have any questions -- sounds like things are moving along
then!
Garrett



On Fri, Jun 18, 2010 at 11:04 AM, Dan Davison <davison@stats.ox.ac.uk>wrote:

> Hi Garrett, could you tell me exactly what input files
> your software uses?
> Dan
>
> Garrett Hellenthal <ghellenthal@gmail.com> writes:
>
> > Hi Dan -
> >
> > Not sure how this ended up last week -- are you set up for phasing
> > now? Did you settle on HapMap Phase II vs Phase III?
> >
> > Garrett
> >
> >
> > On Tue, Jun 1, 2010 at 1:02 PM, Garrett Hellenthal
> > <ghellenthal@gmail.com> wrote:
> >> If I'm not there, I may be up on the top floor rec area finishing lunch!
> >> Garrett
> >>
> >>
> >> On Tue, Jun 1, 2010 at 12:51 PM, Garrett Hellenthal
> >> <ghellenthal@gmail.com> wrote:
> >>> It's on the 2nd floor, room 30.09. It's on the side of the building
> >>> opposite where Peter's office is.
> >>>
> >>> see you then,
> >>> Garrett
> >>>
> >>>
> >>> On Tue, Jun 1, 2010 at 12:48 PM, Dan Davison <davison@stats.ox.ac.uk>
> wrote:
> >>>> Garrett Hellenthal <ghellenthal@gmail.com> writes:
> >>>>
> >>>>> Can we do 2:30 instead? Not sure when in 3-4 I'm meeting with Peter,
> >>>>
> >>>> Sure, see you at 2:30. Where will you be (where's your office)?
> >>>>
> >>>
> >>
>
[2. application/octet-stream; BasqueCondOnEurope.donorlist]...

[3. application/x-gzip; BasqueCondOnEurope.phase.inp.gz]...

[4. application/octet-stream; BasqueCondOnEurope.recomrates]...
#+end_example
***** Recipient analysis
#+begin_src R
  total.lengths <- counts <- mean.lengths <- list()
  exclude <- NULL
  
  for(c in chroms) {
      counts[[c]] <- cp.read.recipient.chunk.counts(c, dir=cpdir, exclude=exclude)
      total.lengths[[c]] <- cp.read.recipient.chunk.lengths(c, dir=cpdir, exclude=exclude)
  }
  
  stopifnot(unlist(lapply(counts, names)) %in% countries)
  stopifnot(unlist(lapply(total.lengths, names)) %in% countries)
  cM <- lapply(total.lengths, function(l) unlist(lapply(l, rowSums)))
  cM <- sapply(cM, function(x) unique(round(x, 1)))
  stopifnot(length(cM) == length(chroms))
  print(cM)
  
  total.lengths1 <- counts1 <- mean.lengths1 <- list()
  for(c in chroms) {
      mean.lengths[[c]] <- mapply("/", total.lengths[[c]], counts[[c]])
      total.lengths1[[c]] <- do.call("rbind", total.lengths[[c]])
      mean.lengths1[[c]] <- do.call("rbind", mean.lengths[[c]])
      counts1[[c]] <- do.call("rbind", counts[[c]])
  }
  
  
  group.pops <- function(x, pops) {
      inn <- colnames(x) %in% pops
      structure(cbind(rowSums(x[,inn,drop=FALSE]), rowSums(x[,!inn,drop=FALSE])),
                dimnames=list(rownames(x), c("in","out")))
  }
  
  for(c in chroms) {
      labs <- sapply(counts[[c]], nrow)
      labs <- factor(rep(names(labs), labs))
      ## No donor pooling
      pdf(sprintf("img/qplots/qplot-meanlengths-%s.pdf", c), width=20, height=5)
      psi.qplot(mean.lengths1[[c]], labels=labs)
      dev.off()
      pdf(sprintf("img/qplots/qplot-totallength-%s.pdf", c), width=20, height=5)
      psi.qplot(total.lengths1[[c]], labels=labs)
      dev.off()
      pdf(sprintf("img/qplots/qplot-counts-%s.pdf", c), width=20, height=5)
      psi.qplot(counts1[[c]], labels=labs)
      dev.off()
      ## DGNS pooling
      ## ingroup <- c("DEN","GER","NOR","SWE")
      ## pdf(sprintf("img/qplot-%s-DGNS.pdf", c), width=20, height=5)
      ## q <- group.pops(px1[[c]], ingroup)
      ## psi.qplot(q, labels=labs)
      ## dev.off()
  }
  
  
  x <- px <- px1 <- mpx <- list()
  px[[c]] <- mapply("/", x[[c]], lapply(x[[c]], rowSums), SIMPLIFY=FALSE)
  mpx[[c]] <- sapply(px[[c]], colMeans)
  
#+end_src

****** Recipient chunk Lengths
#+begin_src R
  s <- chromopainter.read.recipient.chunk.lengths(cpdir, chrom)
  stopifnot(names(s) %in% pops)
  s <- lapply(s, as.matrix)
  ms <- sapply(s, colMeans)
#+end_src
******* Analysis
       	:PROPERTIES:
       	:results:  output replace
       	:END:

******** Scandinavian countries have longest mean chunk lengths
#+begin_src R
  round(sort(rowMeans(ms)), 1)
#+end_src

#+results:
:  ITA  POL  SPA  FRA  GER  BEL  DEN  SWE  NOR
: 14.4 15.2 15.4 16.7 17.5 17.6 18.5 18.8 19.4

******** But ORK is middle in order of NOR chunk lengths
#+begin_src R
round(sort(ms["NOR",]), 1)
#+end_src

#+results:
:  IRE  SPE  HAM  WOR  CHE  COR  NEA  NWA  LEI  SUS  LAN  NFK  DOR  FOD  LIN  UNK  KEN  ORK  HER  DEV  NHA  CUM  DER  OXF  YOR  GLO  NOT  BNB  SUF  NPE  ANB  NIR
: 18.5 18.8 19.0 19.0 19.0 19.1 19.1 19.1 19.2 19.2 19.3 19.3 19.3 19.3 19.4 19.4 19.4 19.4 19.5 19.5 19.5 19.5 19.5 19.6 19.6 19.6 19.7 19.8 19.8 19.9 20.5 20.6

******** What about if Scandinavian countries are lumped?
#+begin_src R
round(sort(colMeans(ms[SCA,])), 1)
#+end_src

#+results:
:
:  IRE  COR  NWA  NEA  FOD  LEI  NFK  HAM  DOR  KEN  NPE  YOR  WOR  SUF  ORK  DEV  HER  GLO  SPE  CUM  NOT  BNB  OXF  UNK  NHA  LIN  ANB  LAN  SUS  CHE  NIR  DER
: 18.0 18.6 18.6 18.7 18.7 18.7 18.8 18.8 18.8 18.8 18.9 18.9 18.9 18.9 18.9 18.9 18.9 18.9 18.9 19.0 19.0 19.0 19.0 19.0 19.0 19.0 19.1 19.1 19.1 19.2 19.5 19.6
***** Donor analysis
#+begin_src R
  x <- chromopainter.read.donor.copy.counts(cpdir, chrom)
  stopifnot(names(x) %in% pops)

  px <- mapply("/", x, lapply(x, rowSums), SIMPLIFY=FALSE)

  npops <- length(filepops)
  for(pop in names(px)) {
      stopifnot(colnames(px[[pop]])[npops] == "Self")
      colnames(px[[pop]])[npops] <- pop
      px[[pop]] <- px[[pop]][,order(colnames(px[[pop]]))]
  }

  z <- sapply(px, colnames)
  stopifnot(z == z[,1], rownames(z) == filepops, colnames(z) == filepops)

  mpx <- sapply(px, colMeans)
#+end_src
****** Image plot
#+begin_src R
  image(mpx, xaxt="n", yaxt="n")
  for(ax in 1:2)
      axis(ax, labels=filepops, at=seq(0, 1, length=npops))
#+end_src

****** PCA plot
    PCA of pairwise mean copying proportions between donor countries.
#+begin_src R :file pca.png :results replace file
pc <- prcomp(mpx[-7,-7]) ## Get rid of Poland
pos <- pc$rotation[,2:1]
pos[,"PC1"] <- -pos[,"PC1"]
plot(pos, typ="n")
text(pos, labels=rownames(pos))
#+end_src

#+results:
[[file:/home/dan/Work/Papers/PoBI/bench/pca.png]]
***** After linear model
#+begin_src R
  p <- list()
  for(fitind in c(TRUE,FALSE)) {
      for(grouped in c(TRUE,FALSE)) {
          for(averaged in c(TRUE,FALSE)) {
  
              files <- list.files("POBIdan-orig/ChromoPainterOUTPUT/propsanddates",
                                  pattern=sprintf("[A-Z][A-Z][A-Z]Props%s.out", if(fitind) "FitInd" else ""),
                                  full.names=TRUE)
  
              pdf.file <- sprintf("img/props/props%s%s%s.pdf",
                                  if(fitind) ".FitInd" else "",
                                  if(grouped) ".Grouped" else "",
                                  if(averaged) ".Averaged" else "")
  
              names(files) <- substr(basename(files), 1, 3)
              props <- list()
              for(reg in names(files)) {
                  load(files[reg])
                  props[[reg]] <- newresults[rownames(newresults) == reg,]
              }
              z <- sapply(props, colnames)
              stopifnot(z[-nrow(z),] == z[-nrow(z),1])
  
              props1 <- do.call("rbind", props)
              ## Remove self-copying column
              props1 <- props1[,-ncol(props1)]
              props1[props1 < 0] <- 0
  
              geo.donors <- geo.recips <- popcodes
              if(grouped) {
                  groups <- c(SPA="MED",ITA="MED",FRA="FRA",BEL="FRA",POL="POL",GER="GER",DEN="SCA",SWE="SCA",NOR="SCA")
                  ## Remove POL and GER
                  bad <- colnames(props1) %in% c("POL","GER")
                  props1 <- props1[,!bad]
                  ## Regroup
                  props1 <- group.sums(props1, labels=factor(groups[!groups %in% c("POL","GER")]), na.rm=TRUE)
                  geo.donors <- c("SCA","FRA","MED")
              }
  
              ## Force recip individual copying proportions to sum to 1
              props1 <- props1 / rowSums(props1)
  
              ## Reorder in vaguely North-South order
              donors <- colnames(props1)
              recips <- rownames(props1)
              donor.order <- order(match(donors, geo.donors), decreasing=TRUE)
              recip.order <- order(match(unique(recips), geo.recips), decreasing=TRUE)
              props1r <- do.call("rbind", split.data.frame(props1, recips)[recip.order])[,donor.order]
              donors <- colnames(props1r)
              recips <- rownames(props1r)
  
              if(averaged) {
                  props1r <- t(sapply(split.data.frame(props1r, factor(recips, levels=unique(recips))),
                                      colMeans, na.rm=TRUE))
                  recips <- unique(recips)
                  dimnames(props1r) <- list(recips, donors)
              }
  
  
              ## Image plot
              donor.midpoints <- seq(0, 1, length=length(donors))
              if(averaged) {
                  recips.midpoints <- seq(0, 1, length=length(recips))
                  recips.Rboundaries <- recips.midpoints + diff(recips.midpoints)[1]/2
              } else {
                  warning("I think these are not quite correct")
                  recips.Rboundaries <- cumsum(table(factor(recips, levels=unique(recips))) / length(recips))
                  recips.Lboundaries <- c(0, recips.Rboundaries[-length(unique(recips))])
                  recips.midpoints <- (recips.Rboundaries + recips.Lboundaries) / 2
              }
              pdf(pdf.file, width=30, height=10)
              image(props1r, xaxt="n", yaxt="n", main=sub("\\.pdf$", "", basename(pdf.file)))
              abline(v=c(0,recips.Rboundaries), lwd=3)
              axis(side=1, at=recips.midpoints, labels=unique(recips), las=2, cex.lab=2)
              axis(side=2, at=donor.midpoints, labels=donors, cex.lab=2)
              dev.off()
  
              pdf(paste(sub("\\.pdf$", "", pdf.file), ".qplot.pdf", sep=""), width=30, height=10)
              psi.qplot(props1r, labels=factor(recips, levels=unique(recips)), main=sub("\\.pdf$", "", basename(pdf.file)))
              dev.off()
              
              pdf(paste(sub("\\.pdf$", "", pdf.file), ".qplot.averaged.pdf", sep=""), width=30, height=10)
              psi.qplot(props1r, labels=factor(recips, levels=unique(recips)), main=sub("\\.pdf$", "", basename(pdf.file)), means=TRUE)
              dev.off()
              
              p[[basename(pdf.file)]] <- props1r
          }
      }
  }
  
#+end_src
****** Email to Garrett
Hi Garrett,

I've replotted your linear model results so that all the recipients are
shown on a single plot:

"Averaged" means the mean copying proportion for the recipient is
plotted rather than each individual.

"Grouped" means I've got rid of Poland and Germany and lumped them
  arbitrarily into
  Mediterranean, France/Central and Scandinavian groups:
  SPA   ITA   FRA   BEL   DEN   SWE   NOR 
 "MED" "MED" "FRA" "FRA"  "SCA" "SCA" "SCA" 


http://www.stats.ox.ac.uk/~davison/pobi/copying/props.pdf
http://www.stats.ox.ac.uk/~davison/pobi/copying/props.Grouped.pdf
http://www.stats.ox.ac.uk/~davison/pobi/copying/props.Grouped.Averaged.pdf
http://www.stats.ox.ac.uk/~davison/pobi/copying/props.FitInd.pdf
http://www.stats.ox.ac.uk/~davison/pobi/copying/props.FitInd.Grouped.pdf
http://www.stats.ox.ac.uk/~davison/pobi/copying/props.FitInd.Grouped.Averaged.pdf
http://www.stats.ox.ac.uk/~davison/pobi/copying/props.FitInd.Averaged.pdf
http://www.stats.ox.ac.uk/~davison/pobi/copying/props.Averaged.pdf


- We /do/ see most Norwegian copying in Orkney, as one might
  expect (props.pdf)
- The top copiers of Scandinavia (Denmark, Sweden, Norway) are
  Lancashire, Orkney, Yorkshire.
- Re Scandinavian copying, North Pembrokeshire is high in the
  populations analysis but low in the individuals analysis.

****** Scandinavian copying proportions
#+begin_src R :rownames yes :results value replace 
sort(p$props.Grouped.Averaged.pdf[,"SCA"], decreasing=TRUE)
#+end_src
******* Fit Populations
#+results:
| LAN | 0.472464684216484 |
| NPE | 0.457006785684227 |
| ORK | 0.427165728350506 |
| YOR | 0.397726420456432 |
| HER | 0.395340884744769 |
| LIN | 0.382241629126448 |
| KEN | 0.365751938816995 |
| HAM |  0.35836272812637 |
| NOT | 0.307306043362477 |
| SUF | 0.272199061678289 |
| IRE | 0.269074209041066 |
| CHE | 0.264813669050678 |
| DOR | 0.259587142840839 |
| OXF | 0.246191683050788 |
| BNB | 0.239383068365199 |
| CUM | 0.233348670965833 |
| NEA | 0.217491667612771 |
| NIR | 0.217488926643555 |
| LEI | 0.215782351585074 |
| FOD |  0.21364204238557 |
| NFK |  0.20584344769352 |
| WOR | 0.195550451666031 |
| DEV | 0.192735372751888 |
| NWA | 0.182882781304951 |
| SPE | 0.177197078795617 |
| SUS | 0.161617095304679 |
| GLO | 0.151130971540175 |
| DER | 0.149369298106595 |
| ANB | 0.141545910358686 |
| COR | 0.140848579852128 |
| NHA |                 0 |

******* Fit Individuals
#+begin_src R :rownames yes :results value replace 
sort(p$props.FitInd.Grouped.Averaged.pdf[,"SCA"], decreasing=TRUE)
#+end_src

#+results:
| LAN | 0.498462852664142 |
| ORK | 0.469485019049479 |
| CHE | 0.409366948297966 |
| YOR | 0.396371842294625 |
| IRE | 0.385967961870147 |
| LEI | 0.375487822125497 |
| CUM | 0.369343776428067 |
| NIR | 0.364574894326041 |
| LIN | 0.355829153159466 |
| SUF | 0.355397031815175 |
| HAM |  0.35106800385725 |
| ANB | 0.350680580865055 |
| NOT | 0.350073573639417 |
| NEA | 0.348234966095933 |
| NFK | 0.344485423183319 |
| FOD | 0.344125834393693 |
| BNB | 0.342584053073702 |
| KEN | 0.342398856740464 |
| HER | 0.339830648396111 |
| NPE | 0.331809626012071 |
| COR | 0.319208265649112 |
| WOR | 0.316538361824733 |
| DEV | 0.315587642300626 |
| DER | 0.314211475282733 |
| OXF | 0.303523007277259 |
| GLO | 0.287753604738464 |
| DOR | 0.273860099869927 |
| SUS | 0.245946738879608 |
| NWA | 0.241778018066776 |
| SPE | 0.237751742078069 |
| NHA | 0.212554346129616 |

**** Haploid unsupervised model?
     Post-process to look at geographic origin of chomosomes in
     individuals?
**** Haplogroups
* Synchronise
#+begin_src sh :results output
  rsync -auvz --delete data/MS/ $cetus:data/MS/ && rsync -auvz --delete data/MS/ $oak:data/MS/
#+end_src

#+results:
: building file list ... done
:
: sent 314 bytes  received 20 bytes  668.00 bytes/sec
: total size is 612863  speedup is 1834.92
: sending incremental file list
:
: sent 284 bytes  received 13 bytes  198.00 bytes/sec
: total size is 612863  speedup is 2063.51

# Local Variables=
# org-babel-default-header-args:R=((:session . "*R-PoBI*"))
# End=
